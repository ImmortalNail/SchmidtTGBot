import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("7572240019:AAE7FqcATdy4yxWc9uPIFL-6NxV0fuY_AeI")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_to_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
             "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("Schmidt_bot.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("BarTour_Bot_Data").sheet1
    return sheet

sheet = connect_to_sheet()

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
CONFIRM_AGE, CONFIRM_PRIVACY, GET_NAME, GET_BIRTHDATE, MAIN_MENU, PHOTO = range(6)

user_data_store = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç? (–¥–∞/–Ω–µ—Ç)")
    return CONFIRM_AGE

async def confirm_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text == "–¥–∞":
        await update.message.reply_text("–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? (–¥–∞/–Ω–µ—Ç)")
        return CONFIRM_PRIVACY
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 18+.")
        return ConversationHandler.END

async def confirm_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text == "–¥–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return GET_NAME
    else:
        await update.message.reply_text("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name) < 3:
        await update.message.reply_text("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return GET_NAME
    context.user_data['full_name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return GET_BIRTHDATE

async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text.strip()
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
        context.user_data['birthdate'] = date_text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        user_data_store[user_id] = {
            "full_name": context.user_data['full_name'],
            "birthdate": date_text
        }

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        full_name = context.user_data['full_name']
        birthdate = context.user_data['birthdate']
        telegram_id = update.effective_user.id
        username = update.effective_user.username or ''
        sheet.append_row([str(telegram_id), username, full_name, birthdate])

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[KeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")]]
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return MAIN_MENU

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return GET_BIRTHDATE

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        return PHOTO
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    user_id = update.effective_user.id
    photo_path = f"photos/{user_id}_{photo_file.file_unique_id}.jpg"

    os.makedirs("photos", exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CONFIRM_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_age)],
            CONFIRM_PRIVACY: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_privacy)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthdate)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.run_polling()
